// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  USER
  MASTER
}
enum FaccaOpType{
  INCOME
  OUTCOME
}
enum UserOpType{
  PAYMENT
  REFUND
}

model Category {
  id       String    @id @unique @default(uuid())
  name     String
  slug     String
  product  Product[]
}

model FACCAOperation{
  id       String    @id @unique @default(uuid())
  timeStamp    DateTime       @updatedAt
  type  FaccaOpType
  value Decimal @db.Decimal(6,2)
  observation String?
  isMP Boolean
}

model Absence{
  id       String    @id @unique @default(uuid())
  timeStamp    DateTime       @updatedAt
  beginDate DateTime
  endDate DateTime
  observation String?
  userID  String
  user  User @relation(fields: [userID], references: [id])
}

model ProductLosses{
  id String @id @unique @default(uuid())
  timeStamp DateTime @updatedAt
  quantity Int @db.SmallInt
  productID String
  product Product @relation(fields: [productID], references: [id])

}

model FinancialOperation {
  id  String         @id @unique @default(uuid())
  timeStamp    DateTime       @updatedAt
  value Decimal @db.Decimal(6,2)
  type  UserOpType
  observation String?
  userID String
  user  User @relation(fields: [userID], references: [id])
}

model Product {
  id           String         @id @unique @default(uuid())
  categoryID   String
  category     Category       @relation(fields: [categoryID], references: [id])
  slug         String
  sellPrice    Decimal        @db.Decimal(6, 2)
  buyPrice     Decimal @db.Decimal(6,2)
  imageURL     String?
  barcode      String?
  name         String
  stock Int @db.SmallInt @default(0)
  isVisible Boolean @default(true)
  productOrder ProductOrder[]
  productLosses ProductLosses[]
}

model Order {
  id           String         @id @unique @default(uuid())
  timeStamp    DateTime       @updatedAt
  userID       String
  user         User           @relation(fields: [userID], references: [id])
  discount     Float
  productsSum  Decimal @db.Decimal(6, 2)
  finalPrice   Decimal @db.Decimal(6, 2)
  profit       Decimal @db.Decimal(6, 2)
  productOrder ProductOrder[]
}

model ProductOrder {
  id        String  @id @unique @default(uuid())
  orderID   String
  order     Order   @relation(fields: [orderID], references: [id], onDelete: Cascade)
  productID String
  product   Product @relation(fields: [productID], references: [id])
  price     Decimal @db.Decimal(6, 2)
  buyPrice  Decimal @db.Decimal(6,2)
  quantity  Float
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
  operations  FinancialOperation[]
  absence Absence[]
  role Role @default(USER)
  member  Boolean @default(false)
  balance Decimal @db.Decimal(6,2) @default(0)


  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
